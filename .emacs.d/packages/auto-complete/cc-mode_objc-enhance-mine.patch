diff -Naur cc-mode_cvs_emacs-unicode-2/cc-align.el cc-mode/cc-align.el
--- cc-mode_cvs_emacs-unicode-2/cc-align.el	2008-01-31 17:50:29.000000000 +0100
+++ cc-mode/cc-align.el	2008-02-04 00:44:25.000000000 +0100
@@ -908,6 +908,51 @@
 	   )
       (- target-col open-bracket-col extra))))
 
+
+(defun c-lineup-ObjC-method-call-colons (langelem)
+  "Line up selector args as Project Builder / XCode: colons of first
+    selector portions on successive lines are aligned.  If no decision can
+    be made return NIL, so that other lineup methods can be tried.  This is
+    typically chained with `c-lineup-ObjC-method-call'.
+
+ Works with: objc-method-call-cont."
+  (save-excursion
+	(catch 'no-idea
+	  (let* ((method-arg-len (progn
+							   (back-to-indentation)
+							   (if (search-forward ":" (c-point 'eol) 'move)
+								   (- (point) (c-point 'boi))
+										; no complete argument to indent yet
+								 (throw 'no-idea nil))))
+
+			 (extra (save-excursion
+										; indent parameter to argument if needed
+					  (back-to-indentation)
+					  (c-backward-syntactic-ws (cdr langelem))
+					  (if (eq ?: (char-before))
+						  (c-get-offset '(objc-met-param-off . nil))
+						0)))
+
+			 (open-bracket-col (c-langelem-col langelem))
+
+			 (arg-ralign-colon-ofs (progn
+									 (forward-char) ; skip over '['
+										; skip over object/class name
+										; and first argument
+									 (c-forward-sexp 2)
+									 (if (search-forward ":" (c-point 'eol) 'move)
+										 (- (current-column) open-bracket-col
+											method-arg-len extra)
+										; previous arg has no param
+									   (c-get-offset
+										'(objc-met-arg-unfin-off . nil))))))
+
+		(if (>= arg-ralign-colon-ofs
+				(c-get-offset '(objc-met-arg-min-to-brac . nil)))
+			(+ arg-ralign-colon-ofs extra)
+		  (throw 'no-idea nil))))))
+
+
 (defun c-lineup-ObjC-method-args (langelem)
   "Line up the colons that separate args.
 The colon on the current line is aligned with the one on the first
@@ -933,7 +978,7 @@
 	  c-basic-offset)))))
 
 (defun c-lineup-ObjC-method-args-2 (langelem)
-  "Line up the colons that separate args.
+  "Line up the colons that separate args in a method declaration.
 The colon on the current line is aligned with the one on the previous
 line.
 
diff -Naur cc-mode_cvs_emacs-unicode-2/cc-fonts.el cc-mode/cc-fonts.el
--- cc-mode_cvs_emacs-unicode-2/cc-fonts.el	2008-01-31 17:50:29.000000000 +0100
+++ cc-mode/cc-fonts.el	2008-02-04 00:46:39.000000000 +0100
@@ -1319,7 +1319,36 @@
 				  nil)))
 		'((c-put-char-property (1- (match-end 1))
 				       'c-type 'c-decl-end)))
-	      c-font-lock-objc-methods))
+	      c-font-lock-objc-methods
+
+		  ;; Parts of selector name in messages
+ 	      ;; PENDING: perhaps should change to only pick up inside brackets
+ 	      ("\\sw*:" 0 font-lock-function-name-face keep t)
+
+ 	      ;; get argument-less selectors' highlighting right
+ 	      ;; [[foo _bar_] _baz_] -> bar, baz are highlighted
+ 	      ("\\(\\sw+\\)[ \t]*[]]"
+		   (1 (let ((non-ws-before-match (char-before
+										  (save-excursion
+											(goto-char (match-beginning 1))
+											;; expensive!
+											(c-backward-syntactic-ws (c-point 'bol))
+											(point)
+											))))
+				(unless (or (eq ?:  non-ws-before-match)
+							(eq ?\[ non-ws-before-match)
+							(eq ?> non-ws-before-match))
+				  font-lock-function-name-face)))))
+		;; PENDING: unsure if c-nonlabel-token-key or c-opt-extra-label-key
+		;;          should be used here
+		(when (c-lang-const c-opt-extra-label-key)
+ 	    `(,(c-make-font-lock-search-function
+			(c-lang-const c-opt-extra-label-key)
+			'((c-put-char-property (1- (match-end 0))
+								   'c-type 'c-decl-end)))))
+		)
+
+
 
       ;; Fontify all declarations, casts and normal labels.
       c-font-lock-declarations
diff -Naur cc-mode_cvs_emacs-unicode-2/cc-langs.el cc-mode/cc-langs.el
--- cc-mode_cvs_emacs-unicode-2/cc-langs.el	2008-01-31 17:50:29.000000000 +0100
+++ cc-mode/cc-langs.el	2008-02-04 00:47:32.000000000 +0100
@@ -210,8 +210,8 @@
 
   (defun c-filter-ops (ops opgroup-filter op-filter &optional xlate)
     ;; Extract a subset of the operators in the list OPS in a DWIM:ey
-    ;; way.  The return value is a plain list of operators:  
-    ;; 
+    ;; way.  The return value is a plain list of operators: 
+    ;;
     ;; OPS either has the structure of `c-operators', is a single
     ;; group in `c-operators', or is a plain list of operators.
     ;; 
@@ -2077,8 +2077,10 @@
   "Keywords for constants."
   t       nil
   (c c++) '("NULL" ;; Not a keyword, but practically works as one.
-	    "false" "true")		; Defined in C99.
-  objc    '("nil" "Nil")
+			"false" "true")		; Defined in C99.
+  objc    '("nil" "Nil" "YES" "NO" "NS_DURING" "NS_HANDLER" "NS_ENDHANDLER"
+			"ASSIGN" "RELEASE" "AUTORELEASE" "RETAIN" "DESTROY"
+			"CREATE_AUTORELEASE_POOL" "RECREATE_AUTORELEASE_POOL")
   idl     '("TRUE" "FALSE")
   java    '("true" "false" "null") ; technically "literals", not keywords
   pike    '("UNDEFINED")) ;; Not a keyword, but practically works as one.
diff -Naur cc-mode_cvs_emacs-unicode-2/cc-menus.el cc-mode/cc-menus.el
--- cc-mode_cvs_emacs-unicode-2/cc-menus.el	2008-01-31 17:50:29.000000000 +0100
+++ cc-mode/cc-menus.el	2008-02-01 04:30:19.000000000 +0100
@@ -331,10 +331,8 @@
 	     'buffer-substring-no-properties
 	   'buffer-substring)))
     (goto-char (point-max))
-    (imenu-progress-message stupid 0)
     ;;
     (while (re-search-backward cc-imenu-objc-generic-expression nil t)
-      (imenu-progress-message stupid)
       (setq langnum (if (match-beginning OBJC) 
 			OBJC
 		      (cond
@@ -386,7 +384,6 @@
 					  methodlist) toplist))
 	      methodlist nil))))
     ;; 
-    (imenu-progress-message stupid 100)
     (if (eq (car toplist) nil)
 	(setq toplist (cdr toplist)))
 
diff -Naur cc-mode_cvs_emacs-unicode-2/cc-vars.el cc-mode/cc-vars.el
--- cc-mode_cvs_emacs-unicode-2/cc-vars.el	2008-01-31 17:50:29.000000000 +0100
+++ cc-mode/cc-vars.el	2008-02-04 00:48:09.000000000 +0100
@@ -940,6 +940,52 @@
   :type 'integer
   :group 'c)
 
+
+
+(defcustom-c-stylevar objc-met-arg-min-to-brac 2
+  "*Minimum number of chars to the opening bracket.
+
+Consider this ObjC snippet:
+
+	[foo blahBlah: fred
+	|<-x->|barBaz: barney
+
+If `x' is less than this number then `c-lineup-ObjC-method-call-colons'
+will defer the indentation decision to the next function.  By default
+this is `c-lineup-ObjC-method-call', which would align it like:
+
+	[foo blahBlahBlah: fred
+	     thisIsTooDamnLong: barney
+
+This behaviour can be overridden by customizing the indentation of
+`objc-method-call-cont' in the \"objc\" style."
+  :type 'integer
+  :group 'c)
+
+
+(defcustom-c-stylevar objc-met-arg-unfin-off 4
+  "*Offset relative to bracket if first selector is on a new line.
+
+    [aaaaaaaaa
+    |<-x->|bbbbbbb:  cccccc
+             ddddd: eeee];"
+  :type 'integer
+  :group 'c)
+
+
+(defcustom-c-stylevar objc-met-param-off 4
+  "*Offset for selector parameter on a new line (relative to first selector.
+
+    [aaaaaaa bbbbbbbbbb:
+	     |<-x->|cccccccc
+                    ddd: eeee
+                   ffff: ggg];"
+  :type 'integer
+  :group 'c)
+
+
+
+
 (defcustom c-default-style '((java-mode . "java") (awk-mode . "awk")
 			     (other . "gnu"))
   "*Style which gets installed by default when a file is visited.
@@ -1125,7 +1171,18 @@
        ;; Anchor pos: Boi.
        (objc-method-args-cont . c-lineup-ObjC-method-args)
        ;; Anchor pos: At the method start (always at boi).
-       (objc-method-call-cont . c-lineup-ObjC-method-call)
+
+
+	   ;; (objc-method-call-cont . c-lineup-ObjC-method-call)
+
+	   (objc-method-call-cont . (c-lineup-ObjC-method-call-colons
+								 c-lineup-ObjC-method-call +))
+	   ;; Anchor pos: (used by c-lineup-method-call-colons)
+	   (objc-met-arg-unfin-off . +)
+	   (objc-met-arg-min-to-brac . *)
+	   (objc-met-param-off . +)
+
+
        ;; Anchor pos: At the open bracket.
        (extern-lang-open      . 0)
        (namespace-open        . 0)
